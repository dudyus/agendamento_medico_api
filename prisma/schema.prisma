generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Funcao {
  id                  Int             @id @default(autoincrement()) 
  nome_funcao         String          @db.VarChar(50)
  profissionais       Profissional[]
  @@map("funcoes")
}

model Profissional {
  id                  Int             @id @default(autoincrement()) 
  nome                String          @db.VarChar(100)
  idade               Int             
  genero              Genero
  ano_inicio_carreira Int             
  foto                String?
  id_funcao           Int             
  destaque            Boolean         @default(true)
  admin_id            String?         @db.VarChar(36) 
  admin               Admin?          @relation(fields: [admin_id], references: [id])
  funcao              Funcao          @relation(fields: [id_funcao], references: [id])
  consultas           Consulta[]
  @@map("profissionais")
}

model Paciente {
  id                  String          @id @db.VarChar(36) @default(uuid())
  nome                String          @db.VarChar(100)
  email               String          @unique @db.VarChar(100)
  senha               String          @db.Text     
  fone                String          @db.VarChar(20)
  endereco            String          @db.VarChar(255)
  data_nasc           DateTime        @db.Date
  cpf                 String          @unique @db.Char(11)
  created_at          DateTime        @default(now()) @db.Timestamp(6)
  updated_at          DateTime        @updatedAt @db.Timestamp(6)
  consultas Consulta[]
  @@map("pacientes")
}


model Consulta {
  id                   Int            @id @default(autoincrement()) 
  id_paciente          String            
  id_profissional      Int            
  data                 DateTime       @db.Date
  hora                 DateTime       @db.Time(6)
  tipo                 Tipo           @default(PRESENCIAL)
  status               Status         @default(AGENDADA)
  confirmada           Boolean        @default(false)
  created_at           DateTime       @default(now()) @db.Timestamp(6)
  updated_at           DateTime       @updatedAt @db.Timestamp(6)
  admin_id             String?        @db.VarChar(36)
  ativo                Boolean        @default(true)
  paciente             Paciente       @relation(fields: [id_paciente], references: [id])
  profissional         Profissional   @relation(fields: [id_profissional], references: [id])
  admin                Admin?         @relation(fields: [admin_id], references: [id])
  @@map("consultas")
}

model Admin {
  id                   String         @db.VarChar(36) @id @default(uuid())
  nome                 String         @db.VarChar(100)
  email                String         @unique @db.VarChar(100)
  senha                String         @db.VarChar(60)
  nivel                Int            @db.SmallInt @default(2)
  created_at           DateTime       @default(now()) @db.Timestamp(6)
  updated_at           DateTime       @default(now())@updatedAt @db.Timestamp(6)
  consultas            Consulta[]
  profissionais        Profissional[]
  logs                 Log[]
  @@map("admins")
}

model Log {
  id            Int         @id @default(autoincrement())
  admin         Admin       @relation(fields: [adminId], references: [id])
  adminId       String      @db.VarChar(36)
  descricao     String      @db.VarChar(60)
  complemento   String      @db.VarChar(200)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@map("logs")
}


enum Genero {
  MASCULINO
  FEMININO
  OUTRO
}

enum Status {
  AGENDADA
  CONCLUIDA
  CANCELADA
}

enum Tipo {
  PRESENCIAL
  ONLINE
}